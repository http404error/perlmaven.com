=title ref - Какого типа эта ссылка?
=timestamp 2014-04-14T11:09:01
=indexes ref, SCALAR, ARRAY, HASH, CODE, REF, GLOB, LVALUE, FORMAT, IO, VSTRING, Regexp
=status show
=original ref
=author szabgab
=translator name2rnd
=comments_disqus_enable 1

=abstract start

Функция <hl>ref()</hl> возвращает тип переданной ей ссылки. 
Если параметр не задан, то будет возвращен тип ссылки для 
<a href="https://perlmaven.com/the-default-variable-of-perl">$_, переменной по умолчанию в Perl.</a>

Согласно документации, возможные возвращаемые значения функции <hl>ref()</hl> такие:

<code>
SCALAR
ARRAY
HASH
CODE
REF
GLOB
LVALUE
FORMAT
IO
VSTRING
Regexp
</code>

Давайте посмотрим, что каждое из них значит.

=abstract end

<h2>Простые скаляры</h2>

Если мы передадим простой скаляр в функцию <hl>ref()</hl>, содержащий
<a href="https://ru.perlmaven.com/undef-i-defined-v-perl">undef</a>, строку или число, то <hl>ref()</hl>
вернет пустую строку:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $nothing;
my $string = 'abc';
my $number = 42;

say 'nothing:    ', ref $nothing;   # 
say 'string:     ', ref $string;    #
say 'number:     ', ref $number;    #
say 'nothing:    ', defined ref $nothing;   # 1
say 'string:     ', defined ref $string;    # 1
say 'number:     ', defined ref $number;    # 1
</code>

<h2>Ссылка на скаляр (SCALAR)</h2>

Если мы передадим в функцию <hl>ref()</hl> ссылку на скаляр 
(содержащий undef, строку или число), то она вернет нам <hl>SCALAR</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $nothing;
my $string = 'abc';
my $number = 42;

my $nothingref = \$nothing;
my $stringref  = \$string;
my $numberref  = \$number;

say 'nothingref: ', ref $nothingref; # SCALAR
say 'stringref:  ', ref $stringref;  # SCALAR
say 'numberref:  ', ref $numberref;  # SCALAR
</code>

<h2>Ссылка на массив (ARRAY) и хеш (HASH)</h2>

Если мы передадим массив или хеш в функцию <hl>ref()</hl>, то она вернет пустую строку,
но если передать ей ссылку на массив или ссылку на хеш, то она вернет <hl>ARRAY</hl> или <hl>HASH</hl>
соответственно.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my @arr = (2, 3);
my %h = (
    answer => 42,
);

my $arrayref  = \@arr;
my $hashref   = \%h;

say 'array:      ', ref @arr;       # 
say 'hash:       ', ref %h;         #
say 'arrayref:   ', ref $arrayref;  # ARRAY
say 'hashref:    ', ref $hashref;   # HASH
</code>

<h2>Ссылка на код (CODE)</h2>

Передав в функцию <hl>ref()</hl> ссылку на функцию, мы получим <hl>CODE</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

sub answer {
     return 42;
}
my $subref    = \&answer;

say 'subref:     ', ref $subref;    # CODE
</code>

<h2>Ссылка на ссылку (REF)</h2>

Если у нас есть ссылка на ссылку и мы ее передадим в <hl>ref()</hl>, тогда
получим <hl>REF</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = 'abc';
my $strref = \$str;
my $refref    = \$strref;
say 'strref:     ', ref $strref;    # SCALAR
say 'refref:     ', ref $refref;    # REF

say 'refrefref:  ', ref \$refref;   # REF
</code>

Если у нас есть ссылка на ссылку на ссылку ... тогда все равно будет <hl>REF</hl>.

<h2>Ссылка на регулярное выражение (Regex)</h2>

Оператор <hl>qr</hl> возвращает прекомпилированное регулярное выражение, 
<hl>ref()</hl> вернет для него <hl>Regexp</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $regex = qr/\d/;
my $regexref = \$regex;
say 'regex:      ', ref $regex;     # Regexp

say 'regexref:   ', ref $regexref;  # REF
</code>

Понятное дело, что передав ссылку на <hl>Regex</hl>, мы снова получим <hl>REF</hl>.

<h2>Ссылка на GLOB</h2>

File-handle, создаваемый функцией <hl>open</hl>, имеет тип <hl>GLOB</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

open my $fh, '<', $0 or die;
say 'filehandle: ', ref $fh;        # GLOB
</code>

<h2>Ссылка на FORMAT</h2>

Мне кажется, что функция <a href="https://metacpan.org/pod/perlform">format</a> в Perl 
не особо нравится разработчикам, поэтому вы редко где ее увидите. Я долго не мог понять,
как мне взять от нее ссылку, но все-таки решил привести пример. Пожалуй, вам 
вообще не стоит задумываться об этом.

<code lang="perl">
use strict;
use warnings;
use 5.010;

format fmt =
   Test: @<<<<<<<< @||||| @>>>>>
.
say 'format:     ', ref *fmt{FORMAT};  # FORMAT
</code>


<h2>Ссылка на VSTRING</h2>

Строка указания версии, начинающаяся с символа <hl>v</hl>, является еще одной редкостью,
хотя и встречается чаще, чем format:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $vs = v1.1.1;
my $vsref = \$vs;
say 'version string ref: ', ref $vsref;  # VSTRING
</code>


<h2>Ссылка на LVALUE</h2>

Lvalue-функции - это функция, которая принимает агрументы слева.
Например, если вы хотите заменить часть строки, то можете использовать 
<a href="https://ru.perlmaven.com/strokovye-funkcii-length-lc-uc-index-substr">версию substr с 4-мя аргументами</a>,
где четвертый аргумент это строка-замена, либо можно использовать 
<a href="https://ru.perlmaven.com/lvalue-substr">версию substr с 3-мя аргументами</a>, присваивая строку-замену слева.

Давайте посмотрим, что произойдет, если мы возмем ссылку на обычный вариант функции substr (c 4-ми аргументами):

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $text = 'The black cat climbed the green tree';
my $nolv = \ substr $text, 14, 7, 'jumped from';
say 'not lvalue:  ', ref $nolv;  # SCALAR
say $nolv;    # SCALAR(0x7f8d190032b8)
say $$nolv;   # climbed
say $text;    # The black cat jumped from the green tree

$$nolv = 'abc';
say $text;    # The black cat jumped from the green tree
</code>

Значение, присвоенное переменной <hl>$nolv</hl> это обычная ссылка на скаляр, 
содержающий значение, возвращаемое функцией <hl>substr</hl>.
В нашем случае - слово 'climbed'.

С другой стороны, если мы возьмем ссылку на 3-аргументный вариант substr (или 2-х),
тогда возвращаемое значение, присвоенное к <hl>$lv</hl> ниже, будет ссылкой на <hl>LVALUE</hl>.
Если его разыменовать через <hl>say $$lv;</hl>, тогда получим оригинальное значение - строку 'climbed'.

Если мы присвоим разыменованной ссылке какое-то значение: <hl>$$lv = 'jumped from';</hl>, тогда 
изменится содержимое переменной <hl>$$lv</hl>, что в свою очередь приведет к замене содержимого
в исходной строке <hl>$text</hl>.

Мы можем повторить присваивание: <hl>$$lv = 'abc';</hl> и исходная строка снова изменится.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $text = 'The black cat climbed the green tree';
my $lv = \ substr $text, 14, 7;
say 'lvalue:      ', ref $lv;    # LVALUE
say $lv;                         # LVALUE(0x7f8fbc0032b8)
say $$lv;                        # climbed
say $text;                       # The black cat climbed the green tree

$$lv = 'jumped from';
say $lv;                         # LVALUE(0x7f8fbc0032b8)
say $$lv;                        # jumped from
say $text;                       # The black cat jumped from the green tree

$$lv = 'abc';
say $$lv;                        # abc
say $text;                       # The black cat abc the green tree
</code>


<h2>Blessed-ссылки</h2>

Как объясняется <a href="https://perlmaven.com/constructor-and-accessors-in-classic-perl-oop">тут</a>,
в <a href="https://perlmaven.com/getting-started-with-classic-perl-oop">классической объектно-ориентированной модели</a> Perl
функция <hl>bless</hl> используется для присоединения ссылки на хеш к пространству имен. (Вообще-то
в <a href="https://perlmaven.com/moo">Moo</a> и <a href="https://perlmaven.com/moose">Moose</a> происходит то же самое, но оно от нас скрыто.)

Тем не менее, если мы вызовем функцию <hl>ref()</hl> для blessed-ссылки, то получим имя пространства имен:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $r = {};
say ref $r;              # HASH
bless $r, 'Some::Name';
say ref $r;              # Some::Name
</code>

Аналогично, если исходная ссылка не является ссылкой на хеш:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $r = [];
say ref $r;               # ARRAY
bless $r, 'Class::Name';
say ref $r;               # Class::Name
</code>

<h2>Еще</h2>

Документация <a href="https://metacpan.org/pod/perlref">perlref</a> содержимт много подробностей на счет <hl>ref</hl> и ссылок в целом.

