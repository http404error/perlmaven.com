=title MongoDB with Perl: insert, find and delete
=timestamp 2017-08-12T01:50:01
=indexes MongoDB
=status show
=books mongodb
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

In this example we'll see how to insert a document in MongoDB. How to find a document based on an internal key-value pair,
and how to delete a document based on similar conditions.

=abstract end

<h2>Example</h2>

<include file="examples/mongodb_insert_delete.pl">

<h2>Explanation</h2>

After loading the <a href="https://metacpan.org/pod/MongoDB">MongoDB</a> module into memory We connect to the MongoDB server, using
the <a href="https://metacpan.org/pod/MongoDB::MongoClient">MongoDB::MongoClient</a> module.

We 'create' a database name based on the process ID and timestamp. This level of uniqueness is good enough for our purposes and in general
I think this is good enough for test cases. In the end, even 'testing' would be ok, but I wanted to reduce the chances I reuse another
database I used for another example. It is also not really 'creating' the database as the database will only be created when we actually
insert some data. The last line in this first section is getting access to a collection called 'data'. We could have used any name here.

<code lang="perl">
use MongoDB;

my $client = MongoDB::MongoClient->new( host => 'localhost', port => 27017 );
my $db_name = 'example_' . $$ . '_' . time;
#say $db_name;
my $database = $client->get_database($db_name);
my $collection = $database->get_collection('data');
</code>

<h2>Inserting documents into MongoDB</h2>

In the next few lines we insert 3 documents. Each document is hash which is the translated into a
<a href="https://en.wikipedia.org/wiki/BSON">BSON</a> string.

<code lang="perl">
$collection->insert_one({
    cpan => {
        name => 'Foo',
        version => 1,
    },
});

$collection->insert_one({
    cpan => {
        name => 'Foo',
        version => 2,
    },
});

$collection->insert_one({
    cpan => {
        name => 'Bar',
        version => 1,
    },
});
</code>

<h2>Fetching all the documents</h2>

Once we have the data in the database, we can use the <hl>find</hl> method on the collection
without any parameters to fetch all the documents. <hl>find</hl> itself returns
a <a href="https://metacpan.org/pod/MongoDB::Cursor">MongoDB::Cursor</a> object. On that
we call the <hl>all</hl> method which, in <a href="/scalar-and-list-context-in-perl">LIST context</a>,
will return the documents along with the <hl>_id</hl> that was generated by MongoDB when we inserted
the data structures. We can iterate over these documents and access the values and print them.

<code lang="perl">
say '-----';
foreach my $e ($collection->find->all) {
    say "$e->{cpan}{name} $e->{cpan}{version}";
}
</code>

The output of this section of code is

<code>
-----
Foo 1
Foo 2
Bar 1
</code>


<h2>Finding documents base on an internal key-value pair</h2>

In the next example we use the <hl>find</hl> method again, but this time we send in a condition
using the "dot notation". That means we are looking for documents that have a main key called
'cpan' which holds a hash in which there is an internal key called 'name' which has a value 'Foo',

<code lang="perl">
say '-----';
foreach my $e ($collection->find({ 'cpan.name' => 'Foo' })->all) {
    say "$e->{cpan}{name} $e->{cpan}{version}";
}
</code>

The output of these few lines is:

<code>
-----
Foo 1
Foo 2
</code>


<h2>Delete document using deep condition</h2>

This call will find a document with the given condition and remove it from the database:

<code lang="perl">
$collection->delete_one({ 'cpan.version' => 2 });
</code>

<h2>Confirm deletition</h2>

Then we repeat the previous call to <hl>find</hl>:

<code lang="perl">
say '-----';
foreach my $e ($collection->find({ 'cpan.name' => 'Foo' })->all) {
    say "$e->{cpan}{name} $e->{cpan}{version}";
}
</code>

The output of this call proves that the <hl>delete_one</hl> call indeed removed a document:

<code>
-----
Foo 1
</code>

<h2>Delete MongoDB database using drop</h2>

Finally we call the <hl>drop</hl> method on the whole database to remove it from  MongoDB.
After all, we don't need the data from this example to stick around.

<code lang="perl">
$database->drop;
</code>

