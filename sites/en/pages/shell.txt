=title Bash - shell scripting examples
=timestamp 2013-12-19T07:30:01
=indexes Bash
=status show
=author szabgab
=comments_disqus_enable 1

=abstract start

While this site is primarily about Perl programming, a real Perl Maven needs to be familiar with a lot of other technologies. Not only Perl. This page is a collection of expressions in
Bash, one of the most commonly used Unix/Linux shell language. 

I am not a frequent Shell-script writer, but for example I needed this for the
build script of <a href="http://dwimperl.szabgab.com/linux.html">DWIM Perl for Linux</a>.

=abstract end

<h2>sh-bang</h2>

<code>
#!/bin/bash -e
</code>

See <a href="http://www.davidpashley.com/articles/writing-robust-shell-scripts/">Writing robust shell scripts</a> for an explanation about the <hl>-e</hl>.

<h2>if statements</h2>

<h3>Does this directory exist?</h3>

<code>
TEST_DIR=/opt/myperl
if [ -d "$TEST_DIR" ]; then
    echo $TEST_DIR already exists. Exiting!
    exit
fi
</code>

<h3>Does file exist?</h3>

<code>
    PERL_SOURCE_ZIP_FILE=perl-5.18.1.tar.gz
    if [ ! -f "$PERL_SOURCE_ZIP_FILE" ]; then
        wget http://www.cpan.org/src/5.0/$PERL_SOURCE_ZIP_FILE
    fi
</code>

<h3>Is variable empty?</h3>

<code>
X=abc
echo "$X"
if [ "$X" == "" ]; then
    echo yes
fi
</code>

or maybe even better to use the <hl>-z</hl> operator:

<code>
X=abc
echo "$X"
if [ -z "$X" ]; then
    echo yes
fi
</code>


<h3>Command line arguments</h3>

<code>
if [ $# == 0 ]; then
    echo "empty"
else
    for x in "$@"; do
        echo "$x"
    done
fi
</code>

(Remember to put " around the $@ or it will incorrectly handle command-line parameters
with spaces in them, like "Perl Maven")

See other <a href="http://tldp.org/LDP/abs/html/comparison-ops.html">comparison operators</a>.
 
<h2>for loop</h2>

<code>
for tool in gcc make cmake; do
    echo "Checking $tool"
done
</code>

<h2>Conditionally install packages on CentOS</h2>

<code>
for tool in gcc make cmake; do
    echo "Checking $tool"
    $tool --version || {
        echo "Installing $tool"
        yes | yum install $tool || { echo "Could not install $tool"; exit 1; }
    }
done
</code>


<h2>Assign values to a variable from external code</h2>

<code>
BUILD_HOME=$(pwd)
</code>

<h2>Avoid backticks!</h2>

$() does the same is better readable and can be stacked.

<code>
cwd=$(pwd)

$( $(which test) -d $DIRECTORY)
</code>

<h2>[[</h2>

It was also recommended to use [[ ]] instead of [ ],
but I am not yet sure why.

<h2>Quoting</h2>

Also always double quote your variables, always (unless you have a good reason not to - which
requires you to know the reason. if you don't, quote your variables.) And using lowercase or
camel case variable names avoids accidental overriding of environment variables.

<h2>Thanks</h2>

the article was updated based on the comments of 
Edward Macke, Dirk Deimeke, Norbert Varzariu, Adam Outler

