=title Regex Problem splitting verilog Bit-Blasted pathes
=timestamp 2019-04-16T17:00:01
=indexes regex
=status show
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

=abstract end

I have a list of bits  as below:

<code>
/ab_c/def/g_hi[1]
/asd/f_gh/qwe/rty[2][3]
/zxc/vbn/nmp_w[4][7][8]
</code>

I want to split them to path and bit like that:

<code>
/ab_c/def/g_hi           [1]
/asd/f_gh/qwe/rty      [2][3]
/zxc/vbn/nmp_w        [4][7][8]
</code>


I tried:

<code>
while (my $line = <$fh>) {
    my @path_splited =  $line =~ /(.*)(\[.*$)/;

    foreach my $n (@path_splited) {
        print "$n\n";
    }
}
</code>

got the below capturing format:

<code>
/ab_c/def/g_hi               [1]      --this is good
/asd/f_gh/qwe/rty[2]      [3]       --this is bad
/zxc/vbn/nmp_w[4][7]    [8]      --this is bad
</code>

looks like the second () captures only the last match.

Is there a way to tell Perl to catch the maximal match instead of the minimal?


<h2>Solution</h2>

Use this regex:

<code>
/([^\[]*)(\[.*$)/
</code>

Taking this apart there are two group: <hl>([^\[]*)</hl> and <hl>(\[.*$)</hl>.

The first on captures any character that is not an open square bracket. (This is the <hl>[^\[]</hl> character-class.
We apply the <hl>*</hl> quantifier to it so it will be able to capture 0 or more characters. Effectively capturing
everything up-to but not including the first opening square bracket.

The second expression captures an opening square bracket <hl>\[</hl> and every other character following that <hl>.*</hl>.

Then whatever they captured will be in <hl>$1</hl> and <hl>$2</hl> respectively.



