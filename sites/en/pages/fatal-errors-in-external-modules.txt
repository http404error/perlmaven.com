=title Exception handling in Perl: How to deal with fatal errors in external modules
=timestamp 2017-04-16T13:30:01
=indexes eval, $@, Time::Piece, do
=status show
=books advanced
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

Originally the accepted way in Perl to signal an error was to return
<a href="/undef-and-defined-in-perl">undef</a> and let the users of the function or module
decide what they want to do with it. If they even look at it.

In other languages throwing an exception is the standard way to signal an error.

Some of the Perl modules on CPAN follow the "return undef" path, others will throw an exception.
The question how to deal with that?

=abstract end

<h2>Parse dates</h2>

In this example we use the <a href="https://metacpan.org/pod/Time::Piece">Time::Piece</a> module
to parse strings represent dates. The <hl>strptime</hl> method accept a string representing
a date and a forma string using <hl>strptime</hl> formatting instructions. It then tries to parse the
string according to the formatting instructions. In our example the formatting instructions
<hl>"%d %b, %Y"</hl> mean we are expecting to have a number representing the days, followed
by a string representing the month (e.g. 'Nov'), and then a 4-digit number representing the year.

<include file="examples/time_piece.pl">

If we run this code we'll see the following output:

<code>
$ perl examples/time_piece.pl
Fri Nov  3 00:00:00 1989
Error parsing time at .../Time/Piece.pm line 469.
</code>

What happened here is that we tried to parse 3 strings, but the 2nd string was incorrectly formatted.
The <hl>strptime</hl> method raised an exception to indicate this failure (probably by calling <hl>die</hl>)
that caused our script to die.

<h2>Catch the exception using eval</h2>

While there are other ways to handle exceptions using, for example
<a href="https://metacpan.org/pod/Try::Tiny">Try::Tiny</a>, in this case we look
at the built-in <hl>eval</hl> statement.

If we wrap a piece of code in an <hl>eval</hl> block, the eval will capture any exception that might
happen within that block, and it will assign the error message to the <hl>$@</hl> variable of Perl.

The simple way to do this looks like this:

(please note, there is a <hl>;</hl> after the <hl>eval</hl> block.)

<code lang="perl">
eval {
     # code that might throw exception
};
if ($@) {
    # report the exception and do something about it
}
</code>

A more robust way to write this looks like this:

<code lang="perl">
eval {
     # code that might throw exception
     1;  # always return true to indicate success
}
or do {
    # this block executes if eval did not return true (bacuse of an exception)

    # save the exception and use 'Unknown failure' if the content of $@ was already
    # removed
    my $error = $@ || 'Unknown failure';

    # report the exception and do something about it
};
</code>

Here too, there is a trailing <hl>;</hl>, but it is only after the <hl>do</hl> block.

<h2>Error handling for Time::Piece</h2>

We used the <hl>eval or do</hl> expression we have just seen.
In this solution we have both the creation of <hl>$tp</hl>
and its use inside the <hl>eval</hl> block. That's because if we cannot parse
the date-string then there is no point in trying to us that variable.

<include file="examples/time_piece_eval.pl">


If we run this script we'll get the following:

<code>
Fri Nov  3 00:00:00 1989
Could not parse 'Nov, 1989' - Error parsing time at .../Time/Piece.pm line 469.
Fri Jan  1 00:00:00 1999
</code>

This means, that although the second string could not parse and Time::Piece raised
an exception, we captured that exception, reported it and then let the <hl>foreach</hl>
loop go on to the third value that was properly parsed and printed.
