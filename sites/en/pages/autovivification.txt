=title What is autovivification?
=timestamp 2015-01-21T07:50:00
=indexes autovivification, exists, delete
=status show
=books advanced
=author szabgab
=comments_disqus_enable 1

=abstract start

Autovivification is both a wonderful blessing and a curse in Perl. It eliminates a lot of
code required when initializing deep data structures, but if you come from a very
strict world it can freak you out at first.

Or make you wonder how could you live without it.

The word <b>autovivification</b> itself comes from the word <b>vivify</b>
which means <b>to bring to life</b>.

=abstract end


<h2>The simple cases for hashes</h2>

The most simple form of it is when you have a hash and you set a value of a
key that did not exist before.

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %phone_of;

print Dumper \%phone_of;
$phone_of{Foo} = '123-456';
print Dumper \%phone_of;
</code>

<code>
$VAR1 = {};
$VAR1 = {
          'Foo' => '123-456'
        };
</code>

As a Perl programmer this does not surprise you any more.

Even if you have a reference to a hash:

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my $phone_of;

print Dumper $phone_of;
$phone_of->{Foo} = '123-456';
print Dumper $phone_of;
</code>

A slightly more surprising version of this is when
we use the auto-increment operator <hl>++</hl> on a
hash element that did not exist before.

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %counter;
print Dumper \%counter;
$counter{Foo}++;
print Dumper \%counter;
</code>

<code>
$VAR1 = {};
$VAR1 = {
          'Foo' => 1
        };
</code>

Perl treats the not-existent value as <a href="/undef-and-defined-in-perl">undef</a>.
When <hl>undef</hl> is used in a <a href="/numerical-operators">numerical operation</a> it acts as if it was 0.
In most cases this would generate a <a href="/use-of-uninitialized-value"">use of uninitialized value"</a> warning,
but specifically in the auto-increment operation it works without complaining.

The resulting value is then assigned back to the hash, creating the key.

<h2>The simple cases for arrays</h2>

In case of an array, if you assign a value to a not-existing element of the array,
or use auto-increment on such element, Perl will automatically enlarge the array
creating all the elements up to the required index, and assigning <hl>undef</hl>
to each intermediate element.

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my @counter;
print Dumper \@counter;
$counter[1] = 20;
$counter[3]++;
print Dumper \@counter;
</code>

The output looks like this:

<code>
$VAR1 = [];
$VAR1 = [
          undef,
          20,
          undef,
          1
        ];
</code>

This means writing <hl>$counter[1_000_000]++;</hl> will enlarge the array to have a million elements almost all of them being <hl>undef</hl>.
Such a <a href="http://en.wikipedia.org/wiki/Sparse_array">sparse array</a> is a huge waste of memory.
In such cases a hash would be probably a better data structure to use.


<h2>Complex data structures</h2>

Autovivification starts to be really interesting on deep data structures. Even when creating a two dimensional hash,
you can just write <hl>$people{Foo}{phone} = '123-456';</hl> and Perl will create the internal hash for the 'Foo' key:

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %people;

print Dumper \%people;
$people{Foo}{phone} = '123-456';
print Dumper \%people;
</code>

Resulting in

<code>
$VAR1 = {};
$VAR1 = {
          'Foo' => {
                     'phone' => '123-456'
                   }
        };
</code>

This is a good thing as you don't have to explicitly create the internal hash.

It even works on undefined scalars:

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my $people;

print Dumper $people;
$people->{Foo}{phone} = '123-456';
print Dumper $people;
</code>

When we created the <hl>$people</hl> scalar, Perl did not yet know that it will become a reference to a hash.
As you can see from the following printout, it was still just an <hl>undef</hl>:

<code>
$VAR1 = undef;
$VAR1 = {
          'Foo' => {
                     'phone' => '123-456'
                   }
        };
</code>

Once we used it as a reference to a hash, it <hl>autovivified</hl> to be a reference to a hash.

The same would happen if we used it as a reference to an array but, if we try to do one after the other:

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my $people;

print Dumper $people;
$people->{Foo}{phone} = '123-456';
print Dumper $people;

$people->[0] = 23;
print Dumper $people;
</code>

We will get an exception.

<code>
$VAR1 = undef;
$VAR1 = {
          'Foo' => {
                     'phone' => '123-456'
                   }
        };
Not an ARRAY reference at autovivification.pl line 12.
</code>

Once <hl>$people</hl> became a reference to a hash, it will not
automatically turn into being a reference to an array. This of course
is a good thing as it can help us avoid some really erroneous code.


<h2>autovivification and accessing elements</h2>

As you might see the autovivification described above can save quite a lot of typing.
It also seems quite logical even if surprising at first.

Unfortunately there are other cases when it is mostly surprising and not that logical.

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %people;

print Dumper \%people;
if (exists $people{Foo}{phone}) {
    print "Good, Foo might have a phone\n";
} else {
    print "Foo has no phone\n";
}

print Dumper \%people;
</code>

In this case we don't assign any value to the hash, we just check if one of the
internal values (the phone of Foo) exists. It does not exist (Foo has not phone),
but the internal hash was created by this operation:

<code>
$VAR1 = {};
Foo has no phone
$VAR1 = {
          'Foo' => {}
        };
</code>

This is quite unfortunate.

This means we have changed the state of the <hl>%people</hl> has just by 
<a href="http://en.wikipedia.org/wiki/Observer_effect_%28physics%29">observing it</a>.

<h2>autovification and deleting elements</h2>

It looks even worse if we are trying to delete an element that does not exist:

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %people;

print Dumper \%people;
delete $people{Foo}{phone};
print Dumper \%people;
</code>

The result is:

<code>
$VAR1 = {};
$VAR1 = {
          'Foo' => {}
        };
</code>

In an attempt to reach the element that needs to be deleted, Perl
created the internal hash of 'Foo'.


<h2>A bug</h2>

I think these undesirable cases are now generally considered to be a bug in Perl.
Unfortunately it is very unlikely that this bug will be fixed in Perl 5 as there is a lot of code
out in the wild (both on CPAN and in companies) that rely on this behavior.
Correcting the behavior would break a lot of code.

The way to avoid this is simple, it is "just" more typing:

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %people;

print Dumper \%people;
if (exists $people{Bar}) {
    if ($people{Bar}{phone}) {
        print "Check Bar...\n";
    }
}

if (exists $people{Foo}) {
    delete $people{Foo}{phone};
}

print Dumper \%people;
</code>

If first we check if the key to the outer hash <hl>exists</hl> and only then
do we go on checking the phone number, or trying to delete it.

This will keep the outer hash clean:

<code>
$VAR1 = {};
$VAR1 = {};
</code>

<h2>no autovification</h2>

As an alternative, there is a pragma on CPAN called
<a href="https://metacpan.org/pod/autovivification">autovivification</a>
that can turn off the bad effects in a lexical scope (within a pair of curly braces),
but it is not widely used:

<code lang="perl">
use strict;
use warnings;

use Data::Dumper qw(Dumper);

my %people;

print Dumper \%people;
delete $people{Foo}{phone};
{
    #no autovivification;
    delete $people{Bar}{phone};
}
print Dumper \%people;
</code>

Running the above code will have the undesired effect for both 'Foo' and 'Bar':

<code>
$VAR1 = {};
$VAR1 = {
          'Bar' => {},
          'Foo' => {}
        };
</code>

If you remove the <hl>#</hl> and run the script again the
undesired effect is gone:

<code>
$VAR1 = {};
$VAR1 = {
          'Foo' => {}
        };
</code>


<h2>Conclusion</h2>

Autovivification is a good thing but we need to be careful we don't create unnecessary
elements while trying to check (or delete) internal elements.

Or at least we know why were they created.



