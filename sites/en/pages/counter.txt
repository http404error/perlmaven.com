=title Counter Examples
=timestamp 2015-03-28T15:40:01
=indexes 
=status show
=books counter
=author szabgab
=comments_disqus_enable 1

=abstract start

In this project we are going to implement a counter with various front-ends and back-ends.

=abstract end

The simpler version of the counter script handles a single counter. Every time we run  the counter it will fetch the latest value from
the "back-end", increment it by one, display the new value, and save the new value back to the "back-end". An interaction might look like this:

<code>
$ count
  1
$ count
  2
$ count
  3
</code>

The slightly more complex version will receive a string as an input and for each string it will maintain a separate counter.
So an interaction might look like this:

<code>
$ count foo
  foo: 1
$ count foo
  foo: 2
$ count bar
  bar: 1
$ count foo
  foo: 3
</code>

The front-end can be command line, or web, or maybe some other GUI.

The back-end is some kind of a "database".  It can be a plain text file, some data serialization format, a relational database, a NoSQL database
and who knows what else.

This is going to be a long project, but it might help understand various techniques for data serialization.

<ul>
  <li>A <a href="/command-line-counter">command-line counter script</a> that uses a plain file called <hl>counter.txt</hl> for a single counter.</li>
  <li><a href="https://code-maven.com/on-load-counter-with-javascript-and-local-storage">On-load counter with JavaScript and local storage</a></li>
  <li><a href="/multiple-command-line-counters">Multiple command line counters with plain TSV text file back-end</a></li>
  <li><a href="/counter-with-database-backend-using-dbix-class">A command line counter with database back-end using DBIx::Class</a></li>
  <li><a href="/command-line-counter-with-json-backend">Command line counter with JSON backend</a></li>
  <li><a href="/counter-with-dancer-sessions">Counter with Dancer session</a></li>
  <li><a href="https://code-maven.com/simple-in-memory-counter-with-angularjs">In-memory counter using AngularJS</a></li>
  <li><a href="https://code-maven.com/automatic-counter-using-angularjs">Automatic counter using AngularJS</a></li>
  <li><a href="https://code-maven.com/counter-in-mongodb-client">Several counters in MongoDB client</a></li>
  <li><a href="/command-line-counter-with-mongodb">Command line counter with MongoDB as storage</a></li>
  <li><a href="http://code-maven.com/comman-line-counter-in-python">Command-line counter in Python</a> for a single counter.</li>
  <li><a href="/pro/counter-with-mojolicious-lite">Counter with Mojolicious Lite</a></li>
  <li><a href="/command-line-counter-with-memchached">Command line counter with Memcached</a></li>
  <li><a href="/increase-numbers-in-a-file">increasing numbers in a text file</a></li>
</ul>


<!--
<h2>Front-end</h2>

<ul>
    <li>command line</li>
    <li>web based:
        <ul>
            <li>plain CGI</li>
            <li>CGI with Ajax</li>
            <li>plain PSGI</li>
            <li>PSGI with Ajax</li>
            <li>Dancer</li>
            <li>Mojolicious</li>
        </ul>
    </li>
</ul>

<h2>Back-end</h2>

<ul>
  <li>several counters each one in its own file</li>
  <li>several counters in a .txt file in CSV format</li>
  <li>several counters in a yaml/json file</li>
  <li>1 counter in SQLite</li>
  <li>several counters in SQLite</li>
  <li>1 counter in MySQL</li>
  <li>several counters in MySQL</li>
  <li>  ? PostgreSQL</li>
  <li>1 counter in MongoDB</li>
  <li>several counters in MongoDB</li>
</ul>
-->
