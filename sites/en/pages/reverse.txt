=title Reverse an array, a string or a number
=timestamp 2014-04-11T17:10:01
=indexes reverse
=status show
=books beginner
=author szabgab
=comments_disqus_enable 1

=abstract start

Given an array of values <hl>my @words = qw(Foo Bar Moo);</hl>, how can we reverse the order of the values
to get <hl>Moo Bar Foo</hl>?

Given a string <hl>my $str = 'stressed';</hl>, how can I get the characters in reverse order to get <hl>'desserts'</hl>?

Given a number: <hl>3.14</hl>, how can I reverse it to get <hl>41.3</hl>?

=abstract end

As Perl does not care much if the content of a scalar variable is a string or a number, reversing a string or
a number is the same. So we only have two cases: reversing a scalar and reversing an array.

The function <hl>reverse</hl> can be used in both cases:

<h2>Reverse array</h2>

<include file="examples/reverse_array.pl">

And the output is:

<code>
Foo Bar Moo
Moo Bar Foo
</code>

<h2>Reverse a scalar: string or number</h2>

<include file="examples/reverse_scalar.pl">

And the output is:

<code>
stressed
desserts
3.14
41.3
</code>

So the same function can be used for two similar things. This is nice, but it also has some pitfalls.

<h2>The pitfalls</h2>

The two behaviors of <hl>reverse</hl> are not decided by its parameter, but by the construct that is on the left hand side.

If you try to reverse an array but put the assignment in <a href="/scalar-and-list-context-in-perl">SCALAR context</a>,
the result might surprise you:

<code lang="perl">
my $str = reverse @words;
say $str; 
</code>

<code>
ooMraBooF
</code>

The same if you try to reverse a string, but put the assignment in <a href="/scalar-and-list-context-in-perl">LIST context</a>:

<code lang="perl">
my $str = 'stressed';
my @words = reverse $str;
say $words[0];
</code>

<code>
stressed
</code>

Of course, it is not very likely that you'll write code like in the latest example, but what about these examples:

<code lang="perl">
my $str = 'stressed';
say reverse $str;
</code>

<code>
stressed
</code>

Looks strange. As if <hl>reverse</hl> had no impact.

What about this one?

<code lang="perl">
my @words = qw(Foo Bar Moo);
say reverse join '', @words;
</code>

It prints

<code>
FooBarMoo
</code>

That might be surprising. Did the reverse not work there, or were the words already reversed?
What if we do the same, but without the call to <hl>reverse</hl>:

<code lang="perl">
my @words = qw(Foo Bar Moo);
say join '', @words;
</code>

<code>
FooBarMoo
</code>

That would be baffling. As if <hl>reverse</hl> has not impact.
Indeed, if you try to reverse a string (the result of <a href="/join">join</a> in this case), but put
the call in <hl>LIST context</hl> created by the <hl>say</hl> function, then it tries to reverse the
list given to it string-by-string. Like in this case:

<code lang="perl">
my $str = 'stressed';
my ($rev) = reverse ($str);
say $rev;
</code>

Which prints

<code>
stressed
</code>

In order to fix the above issues, we need to make sure <hl>reverse</hl> is called in 
SCALAR context which can be achieved using the <hl>scalar</hl> function:

<code lang="perl">
my $str = 'stressed';
say scalar reverse $str;

my @words = qw(Foo Bar Moo);
say scalar reverse join '', @words;
</code>

resulting in

<code>
desserts
ooMraBooF
</code>

(Thanks to <a href="http://www.linkedin.com/in/jonathancast">Jonathan Cast</a> reminding me to add these examples.)

<h2>Semordnilap</h2>

BTW words like "stressed" and "desserts" are called 
<a href="http://en.wikipedia.org/wiki/Palindrome#Semordnilap">Semordnilap</a>. They are a
a strange form of <a href="http://en.wikipedia.org/wiki/Palindrome">Palindrome</a> where the
reversed version of a word has a different, but valid meaning.

<h2>Conclusion</h2>

Remember, the behavior of <hl>reverse</hl> depends on its <b>context</b>.
On what is on its left-hand side.

