=title Sum numbers in a file - video
=timestamp 2015-03-28T17:03:11
=indexes sum
=tags screencast
=status show
=books beginner_video
=author szabgab
=comments_disqus_enable 1

=abstract start

Sum numbers in a file

=abstract end

<slidecast file="/media/videos/beginner-perl/sum-numbers-in-a-file" youtube="77MUdZp4FBc" />

Let's do now something slightly useful with our knowledge.
In this example we have a file called <hl>numbers.txt</hl> that has numbers in it. Each line is a number:

<include file="examples/files/numbers.txt">

Let's add these numbers together and print out their sum:
In order to accomplish this we need to have a variable to hold the sum of numbers so far that will start from 0, then go over
the file line-by-line and add the content of each line to the variable holding the sum.

<include file="examples/files/count_sum.pl">

After including the standard beginning of almost every Perl program we declare a variable called <hl>$sum</hl> where we are going to collect the sum
of the numbers. We initialize it to 0.

Then we have the name of the file hard-coded in a variable called <hl>$filename</hl>

The we call <hl>open</hl> to open the file <hl>or die</hl> to throw an exception of the <hl>open</hl> failed. Regular thing
we have seen in the article <a href="/open-and-read-from-files">open and read from files</a>.

Then we go over it line-by-line using a <hl>while</hl> loop.

This code will read in one line on every iteration. So <hl>$line</hl> will always contain the a line which is a number and trailing newline.
Then we add that line to the <hl>$sum</hl> variable using <hl>+=</hl>. Because Perl is nice to us, it disregards the newline, and automatically converts
the string to a numeric value so we don't need to use any special expression for casting the string to a number.

When we finish the loop we have all the numbers in the <hl>$sum</hl> variable that we can print.


<h2>Using List::Util</h2>

We have not learned it yet, and it is <b>not in the video</b>, but let me add two more solutions. In the first
one we use the <hl>sum</hl> function of the standard <a href="https://metacpan.org/pod/List::Util">List::Util</a> module.

<include file="examples/files/sum.pl">

We open the file exactly the same way as we did in the previous example, but this pass the result of the read-file operator to the
<hl>sum</hl> function. In this case we are actually <a href="https://perlmaven.com/reading-from-a-file-in-scalar-and-list-context">reading from the file in list context</a>
which means all the lines are read into memory at once and they are passed to the <hl>sum</hl> function as individual elements. (Each line is one element.)
The <hl>sum</hl> function then adds them together and returns the result.


<h2>Using Path::Tiny as well</h2>

In the third example we also use the <hl>path</hl> function of the <a href="https://metacpan.org/pod/Path::Tiny">Path::Tiny</a> module
that opens a file and returns an object on which we can call the <hl>lines<hl> method. This will return the lines of the file.

<include file="examples/files/sum_short.pl">



