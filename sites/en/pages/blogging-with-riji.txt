=title Blogging with Riji
=timestamp 2013-12-20T16:30:01
=indexes Riji, blog, GitHub pages
=status show
=author szabgab
=comments_disqus_enable 1

=abstract start

<b>Riji</b> which means diary in Chinese is a simple blog tool using Markdown and Git.

=abstract end

<h2>Background</h2>

I was looking at <a href="https://metacpan.org/pod/Text::Xslate">Text::Xslate</a>
and its dependencies. That's how I bumped
into <a href="https://metacpan.org/pod/Riji">Riji</a>

The current release is version 0.0.11 and 
<a href="https://github.com/Songmu">Masayuki Matsuki</a>,
the author says it is not ready yet.
But when did that stop us from trying something?

Riji can be also found on <a href="https://github.com/Songmu/p5-Riji">GitHub</a>
with and additional
<a href="https://github.com/Songmu/p5-Riji/blob/master/share/README.md">README</a>
and there is a <a href="http://songmu.github.io/p5-Riji/blog/">Riji tutorial</a>,
in Japanese.

I tried the following on OSX, but I believe it should work the same on any
Linux system as well.

<h2>Installation of Riji</h2>

If you don't have it yet, install <a href="http://cpanmin.us">CPAN Minus</a>.

Then install Riji using <hl>cpanm Riji</hl>.

You will also have to have a <hl>git</hl> client installed.

<h2>Setup diary</h2>

You have to be in an empty directory in order to get started so I created one:

<code>
$ mkdir riji-diary
$ cd riji-diary
$ riji setup

Initialized empty Git repository in /Users/gabor/tmp/diary/.git/
[master (root-commit) 1bc574d] initial blog commit
 10 files changed, 163 insertions(+)
 create mode 100644 README.md
 create mode 100644 article/archives.md
 create mode 100644 article/entry/sample.md
 create mode 100644 article/index.md
 create mode 100644 riji.yml
 create mode 100644 share/tmpl/base.tx
 create mode 100644 share/tmpl/default.tx
 create mode 100644 share/tmpl/entry.tx
 create mode 100644 share/tmpl/index.tx
 create mode 100644 share/tmpl/tag.tx
</code>

The <hl>riji setup</hl> command created the directory structure and already
ran <hl>git init .</hl> on my behalf, and even committed the first
changes.

If you'd like to see the directly layout in a nicer way, run <hl>tree</hl>:

<code>
$ tree
.
├── README.md
├── article
│   ├── archives.md
│   ├── entry
│   │   └── sample.md
│   └── index.md
├── riji.yml
└── share
    └── tmpl
        ├── base.tx
        ├── default.tx
        ├── entry.tx
        ├── index.tx
        └── tag.tx

4 directories, 10 files
</code>

Riji is mostly for using via GitHub Pages, but 
it comes with a small built-in web-server to make the development faster.
To start the server type <hl>riji server -L Shotgun</hl>:

(You could get away with just <hl>riji server</hl> as well,
but using the <a href="https://metacpan.org/pod/Plack::Loader::Shotgun">Shotgun</a>
will make sure the files are reloaded when you change them.)

<code>
$ riji server -L Shotgun
Watching  for file updates.
HTTP::Server::PSGI: Accepting connections at http://0:3650/
</code>

Then use your browser to access <a href="http://localhost:3650/">port 3650 on your machine</a>:

<img src="/img/riji_after_setup.png" alt="After setup" />

<h2>Directory structure and files of Riji</h2>

In the root directory there is a configuration file called <hl>riji.yml</hl>.

The <hl>article</hl> directory contains the source of the articles.
For example the default sample page you can see is served from 
<hl>article/entry/sample.md</hl>


<h2>Editing an article</h2>

The file <hl>article/entry/sample.md</hl> has the following content:

<code>
# Sample
</code>

Let's edit the file. Let's change it to

<code>
# New example
</code>

After editing the file you can reloaded the page in your browser.
If you used the Shotgun as recommended above, you'll see the word
<b>Sample</b> was replaced by <b>New example</b>.

You can now go ahead and type in more text using the
<a href="http://daringfireball.net/projects/markdown/">Markdown syntax</a>.

For example type this:

<code>
# New example

This is the content of the file.

* Bullet
* Points

    verbatim text
    and more verbatim

and then back where I started again from
the [Perl Maven](https://perlmaven.com)
</code>

and then reload the page in your browser

<h2>Second page</h2>

Create a new file in the <hl>article/entry/</hl> directory:
(e.g.  <hl>article/entry/tutorial.md</hl> ) and put the following
in the file:

<code>
# Riji Tutorial

Type something here
-------------------
</code>

After reloading the browser you'll see the following:

<img src="/img/riji_second_page.png" alt="Riji second page" />


<h2>Individual pages</h2>

Besides having a main page with the content of the articles, 
Riji also provides the pages on their individual URLS.
For example, the new tutorial page can also be accessed
as <a href="http://localhost:3650/entry/tutorial.html">/entry/tutorial.html</a>
on your machine.

<h2>Atom instead of RSS feed</h2>

Riji automatically generates an Atom feed for the site.
It can be accessed as
<a href="http://localhost:3650/atom.xml">/atom.xml on your computer</a>.


<h2>Configuration</h2>

As you can see the title of the site is <b>Your Blog Title</b> and
author is marked as <b>Your name</b>. These values come from the
<hl>riji.yml</hl>

<code>
author:   'Your name'
title:    "Your Blog Title"
site_url: 'http://yourblog.example.com/'
</code>

I changed it to:

<code>
author:   'Gabor Szabo'
title:    "Perl Maven Riji tutorial"
site_url: 'http://yourblog.example.com/'
</code>

Reloading the page in the browser did not show the changes.
Apparently the Shotgun does not monitor that file.

I had to stop the server using Ctr-C in the console where it runs,
and started it again with the same options.

After reloading the page in the browser it shows the new title and
new author. The <b>site_url</b> is used in the atom feed only.


<h2>Add to git</h2>

If we go back to the command line and type <hl>git status</hl> now,
we'll see that two files have changed and there is a new untracked
file:

<code>
$ git status

# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   article/entry/sample.md
#	modified:   riji.yml
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	article/entry/tutorial.md
no changes added to commit (use "git add" and/or "git commit -a")
</code>

As Git also suggests we can now type <hl>git add .</hl> to stage
all the files, and the we can commit them by typing
<hl>git commit -m "add tutorial"</hl>

<h2>Publish</h2>

While you can run Riji using <a href="https://metacpan.org/pod/Starman">Startman</a>,
or some other <a href="http://plackperl.org/">PSGI-server</a>, but you can also
generate static pages, upload them to some free server like the
<a href="http://pages.github.com/">GitHub Pages</a>.
In another article you can find explanation
<a href="/building-a-static-blog-using-blio-and-github">how to use GitHub pages</a>.

Let's see what did I do:

<hl>riji publish</hl> generates the static pages in the <hl>blog/</hl> subdirectory.
This can be used, or you can add 

<code>
publish_dir: .
</code>

to the <hl>riji.yml</hl> file and then the files will be generated in the root directory
of your repository.

Instead of that I put 

<code>
publish_dir: 'blog'
</code>

just to say explicitly where I want the files to go.

Once the files were generated, I add them to git:

<code>
git add .
git commit -m "add published files"
</code>

Created a GitHub repository called
<a href="https://github.com/szabgab/riji-diary">riji-diary</a>
and followed the instructions of the
<a href="https://help.github.com/categories/20/articles">help site</a>.

The result is <a href="http://github.szabgab.com/riji-diary/blog/">here</a>.



