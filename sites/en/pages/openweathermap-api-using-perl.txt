=title Using the Open Weather Map API with Perl
=timestamp 2019-02-27T12:00:01
=indexes LWP::Simple, Config::Tiny, Cpanel::JSON::XS
=status show
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

In <a href="https://code-maven.com/pro/openweathermap-api-using-curl">Using the Open Weather Map API with curl</a> we saw how to fetch the weather using <hl>curl</hl>. Now we are going to use Perl as that
will make it easier to use this as part of a larger application. Before you read this article, make sure you read
the one using <hl>curl</hl>.

=abstract end


<h2>Configuration file</h2>

As you can read in the other article, in order to access the Open Weather Map API we need to have an API key.
We could store the API-key in a variable in the code, but then if we distribute the code we also distribute the API key.

Usually it is a better practice to have all of these keys and sometimes passwords in external files that are not stored
together with the code of the application. That makes it also a lot easier to have a separate set of keys for development, testing,
and production.

We created a file called <b>config.ini</b> with the following content:

<code>
[openweathermap]
api=wkfhshoiaslv
</code>

Where of course I put the API-key from <a href="https://home.openweathermap.org/api_keys">Open Weather Maps</a>.

In the code we used <a href="https://metacpan.org/pod/Config::Tiny">Config::Tiny</a> to <a href="/reading-configuration-files-in-perl">reading the configuration INI file</a>.
This is in the <hl>get_api_key</hl> function.

We used the <hl>get</hl> function provided by <a href="https://metacpan.org/pod/LWP::Simple">LWP::Simple</a> to access the API and
the <hl>decode_json</hl> function provided by <a href="https://metacpan.org/pod/Cpanel::JSON::XS">Cpanel::JSON::XS</a> as featured in the article
about <a href="/json">JSON</a> to convert the received JSON string into a perl data structure.


Then in the <hl>main</hl> function we print the temperature which is inside the "main" key of the retrieved data structure using
<hl>$weather->{main}{temp};</hl> and we also use the <hl>Dumper</hl> function to show the whole data structure as a Perl hash.

<h2>The code</h2>

<include file="examples/get_weather.pl">


<h2>The dumped data</h2>

<code>
$VAR1 = {
          'weather' => [
                         {
                           'id' => 701,
                           'description' => 'mist',
                           'main' => 'Mist',
                           'icon' => '50n'
                         }
                       ],
          'id' => 3054643,
          'base' => 'stations',
          'dt' => 1518193800,
          'cod' => 200,
          'name' => 'Budapest',
          'coord' => {
                       'lat' => '47.5',
                       'lon' => '19.04'
                     },
          'clouds' => {
                        'all' => 75
                      },
          'visibility' => 4500,
          'main' => {
                      'temp' => 3,
                      'humidity' => 89,
                      'temp_min' => 3,
                      'temp_max' => 3,
                      'pressure' => 1016
                    },
          'sys' => {
                     'sunset' => 1518191920,
                     'id' => 5724,
                     'message' => '0.0031',
                     'sunrise' => 1518155886,
                     'country' => 'HU',
                     'type' => 1
                   },
          'wind' => {
                      'speed' => '2.1',
                      'deg' => 350
                    }
        };
</code>

<h2>Conclusion</h2>

Once we have this basic solution we can integrate this code into a larger application or change the requested URL to
match other API end-points.

