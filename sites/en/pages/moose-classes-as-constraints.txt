=title Classes as constraints in Moose
=timestamp 2016-12-09T08:00:11
=indexes Moose, isa, DateTime
=tags screencast
=books moose
=status show
=author szabgab
=comments_disqus_enable 1

=abstract start

In the <a href="/moose-type-constraint">previous example</a> of the <a href="/moose">Moose</a> series we had an attribute called "year" that was accepting a number.
What if we really want to have an attribute called birthday, that contains a real date. Instead of handling the dates by ourself
we would like to use a module that already handles them nicely. For example, we would like to use the <a href="https://metacpan.org/pod/DateTime">DateTime</a>
module.

=abstract end

<slidecast file="/media/videos/advanced-perl/moose/classes-as-constraints" youtube="NYsAqRK3kmw" />

Let's see the class itself in the <b>lib/Person.pm</b> file:

<code lang="perl">
package Person;
use Moose;

has 'name'     => (is => 'rw');
has 'birthday' => (isa => 'DateTime', is => 'rw');

1;
</code>

It has an attribute called <b>birthday</b>, but instead of it being declared as <hl>isa => 'Int'</hl>,
we declare it as <hl>isa => 'DateTime'</hl>.

This expression defines that the 'birthday' attribute must be an instance of the 'DateTime' Perl class.
So the constrains are not only the various internally declared types such as <hl>Int</hl>, but they
can be any Perl class that we can load.


So when we call the setter of the 'birthday' attribute we have to pass it a DateTime object.
We can do that by creating the object right in the setter:

<code lang="perl">
$student->birthday( DateTime->new( year => 1988, month => 4, day => 17) );
</code>

Here we call the constructor of the DateTime class providing year, month, and day.

When we call the getter, it will return the DateTime object, and with <hl>say</hl>
DateTime will stringify to some human-readable format of the date.

<code lang="perl">
say $student->birthday;
</code>

<hl>perl -Ilib script/person.pl</hl>

<code>
1988-04-17T00:00:00
</code>


In the last expression of the script we called the setter again, but this time
we just passed a number.

<code lang="perl">
$student->birthday(1988);
</code>

This will throw an exception like this one:

<code>
Attribute (birthday) does not pass the type constraint because: 
    Validation failed for 'DateTime' with value 1988
       at accessor Person::birthday (defined at lib/Person.pm line 5) line 4
    Person::birthday('Person=HASH(0x2143928)', 1988)
       called at script/person.pl line 14
</code>

This happens because the value passed to the <hl>birthday</hl> setter now needs to
be a DateTime object and not just any number.

The full <b>script/person.pl</b> file:

<code lang="perl">
use strict;
use warnings;
use v5.10;

use Person;
use DateTime;

my $student = Person->new( name => 'Foo' );

$student->birthday( DateTime->new( year => 1988, month => 4, day => 17) );

say $student->birthday;

$student->birthday(1988);
</code>


