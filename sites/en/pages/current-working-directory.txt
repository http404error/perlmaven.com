=title Current working directory in Perl (cwd, pwd)
=timestamp 2017-03-18T12:30:01
=indexes Cwd, cwd, getcwd, pwd
=status show
=books beginner
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

Every process and every application running on your computer is associated with a directory on the filesystem, called the "current working directory".

On Microsoft Windows, if you open a <b>Command Shell</b> (by running <hl>cmd</hl>) you'll see the current working directory of this shell in the prompt.
(e.g. <hl>c:\users\Foo Bar\Desktop></hl> indicates that the working directory of this <hl>cmd</hl> window is <hl>c:\users\Foo Bar\Desktop></hl>.
When configuring a new launcher icon, one can set what should be the initial working directory of the process.

On Linux, Apple OSX, and Unix in general the command <hl>pwd</hl> means <b>print working directory</b> and it is used to fetch the current working directory.

=abstract end

Perl has a standard module called <a href="http://metacpan.org/pod/Cwd">Cwd</a> that provides this functionality via a number of functions.

<h2>cwd</h2>

<code lang="perl">
use Cwd qw(cwd);
my $dir = cwd;

print "$dir\n";
</code>

<h2>getcwd</h2>

<code lang="perl">
use Cwd qw(getcwd);
my $dir = getcwd;

print "$dir\n";
</code>


<h2>cwd or getcwd?</h2>

In most cases cwd and getcwd will return the same path, but there can be differences.
Specifically if symbolic links are involved.

Let's say we create a directory called "abc" and a <b>symbolic link</b> pointing to that directory:

<code>
$ mkdir abc
$ ln -s abc def
$ ls -l

drwxr-xr-x    2 gabor  staff     68 Aug  9 09:29 abc
lrwxr-xr-x    1 gabor  staff      3 Aug  9 09:30 def -> abc
</code>

The resulting directory structure looks like this:

<pre>
dir/
   abc
   def -> abc
</pre>


Now let's see what do <hl>cwd</hl> and <hl>getcwd</hl> return if we are in either of those directories.

<include file="examples/cwd.pl">

<code>
$ cd abc
$ perl ../cwd.pl
   /dir/abc
   /dir/abc
</code>

<code>
$ cd ../def
$ perl ../cwd.pl
   /dir/def
   /dir/abc
</code>

In other words  <hl>cwd</hl> will return the symbolic link (the logical path to where we are) while <hl>getcwd</hl>
will resolve the symbolic link and return the real directory (the hard link) of where we are.

