=title Class as type constraint
=timestamp 2018-07-22T06:00:11
=indexes Scalar::Util, blessed, isa, UNIVERSAL
=tags screencast
=status show
=author szabgab
=comments_disqus_enable 1

=abstract start

In this example we are going to use a regular Perl class as a type constraint.
In the Moose version of the series we used a DateTime object as a type constraint.
<a href="/moose-classes-as-constraints">Classes as constraints in Moose</a>

Implementing it in core Perl is quite similar to the previous cases. For example
when we had <a href="/accessor-with-type-constraint">accessor with type constraint</a>.

=abstract end

<slidecast file="/media/videos/advanced-perl/core-perl-oop/class-as-type-constraint" />

<include file="examples/oop/person03/lib/Person.pm">

In the <hl>birthday</hl> setter/getter we add a <hl>die ... if not ...</hl> construct.

First we check if the given parameter is a <hl>blessed</hl> reference, that is if it is
an instance of anything.
Then we check if it <b>is a</b> instance of DateTime using the
appropriately named <hl>isa</hl> method from the <a href="https://metacpan.org/pod/UNIVERSAL">UNIVERSAL</a>
package.
We need to have this 2-step checking as the <hl>isa</hl> method calling would throw an exception if the
variable <hl>$value</hl> did not contain an object.

The <hl>blessed</hl> function comes from the <a href="https://metacpan.org/pod/Scalar::Util">Scalar::Util</a> module.

<h2>Script</h2>
Sample script to use the module:

<include file="examples/oop/person03/script/person.pl">


<h2>Test</h2>

Test to verify the module and the birthday setter:

<include file="examples/oop/person03/t/01-name.t">

