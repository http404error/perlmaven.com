=title How to rename multiple files with one command on Windows, Linux, or Mac?
=timestamp 2013-12-08T11:20:01
=indexes Path::Tiny, Path::Iterator::Rule
=status show
=author szabgab
=comments_disqus_enable 1

=abstract start

Given many, many files named like this: my_file_1.php, how
can I rename them to be named like this: my-file-1.php

=abstract end

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $dir = shift or die "Usage: $0 DIR";

use Path::Iterator::Rule;
use Path::Tiny qw(path);
my $rule = Path::Iterator::Rule->new;

for my $file ( $rule->all( $dir ) ) {
    #say $file;
    my $pt = path $file;
    #say $pt->basename;
    if ($pt->basename =~ /\.php$/) {
        my $newname = $pt->basename;
        $newname =~ s/_/-/g;
        #say "rename " . $pt->path . " to " . $pt->parent->child($newname);
        rename $pt->path, $pt->parent->child($newname);
    }
}
</code>

Save this as rename.pl and then run it on the command line <hl>perl rename.pl path/to/dir</hl>.

Alternatively, save this as rename.pl, replace the <hl>my $dir ...</hl> line by
<hl>my $dir = "/full/path/to/dir";</hl>
and then you can run it without passing the directory name on the command line.

On <b>Windows</b> the path name should be either using slashes:
<hl>my $dir = "c:/full/path/to/dir";</hl>,
or using pairs of back-slashes: <hl>my $dir = "c:\\full\\path\\to\\dir";</hl>.

<a href="https://metacpan.org/pod/Path::Iterator::Rule">Path::Iterator::Rule</a> will
allow us to <a href="/finding-files-in-a-directory-using-perl">traverse the directory tree</a>,
so we can rename files in the whole tree.

<a href="https://metacpan.org/pod/Path::Tiny">Path::Tiny</a> helps us extracting the directory
name and building the new name.

Some commented out print-statement were left in, to make it easier to follow what's happening.

