=title How to insert an array into another array in Perl?
=timestamp 2015-02-04T19:05:01
=indexes splice
=status show
=books beginner
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

Given an array called <hl>@names = qw(Foo Bar Baz);</hl> and another array called <hl>my @languages = qw(Perl Python Ruby PHP);</hl> how can
the <hl>@languages</hl> array be inserted in the "middle" of the <hl>@names</hl> array?

Of course I think the "middle" only means - "somewhere" and not that "the same distance from the beginning and from the end",
but we have another issue with the task.

=abstract end

There can be two types of insertions. <b>Flattening</b>, when the elements of <hl>@language</hl> become elements of <hl>@names</hl>, and thus
at the end of the operation <hl>@names</hl> will have 7 elements; or it can be <b>non-flattening</b>, that will create a sort-of
two-dimensional array. In this case <hl>@names</hl> will have 4 elements after the operation, one of them is a reference
to an internal array that holds the elements of <hl>@languages</hl>.

The solution to the two cases is quite similar. They both use the 
<a href="https://perlmaven.com/splice-to-slice-and-dice-arrays-in-perl">splice</a> function.
Maybe we just need to adjust how we call the operation:

In the first case we

<h2>Insert an array in another array</h2>

<include file="examples/insert_array_in_array.pl">

in the second case we 

<h2>Insert and array reference in another array</h2>

<include file="examples/insert_array_ref_in_array.pl">

The difference in the two code snippets is that in the first one we insert <hl>@languages</hl> and in
the second one we insert <hl>\@languages</hl>. Note the leading backslash.

If we run the scripts:

The first one generates a simple, flat array:

<code>
$ perl examples/insert_array_in_array.pl 

$VAR1 = [
          'Foo',
          'Perl',
          'Python',
          'Ruby',
          'PHP',
          'Bar',
          'Baz'
        ];
</code>

The second one generates a two-dimensional array:

<code>
$ perl examples/insert_array_ref_in_array.pl 

$VAR1 = [
          'Foo',
          [
            'Perl',
            'Python',
            'Ruby',
            'PHP'
          ],
          'Bar',
          'Baz'
        ];
Ruby
$VAR1 = [
          'Perl',
          'Python',
          'Ruby',
          'PHP'
        ];
</code>

in which we can reach the values of the inserted array by using the the appropriate index
on the main array.


Beside one leaving a one-dimensional array behind and the other one creating a two-dimensional array, there is another
big difference between the two. What if after inserting the array we change the original <hl>@languages</hl> array?

<h2>Changing the content of the array</h2>

In the first case, the content of <hl>@languages</hl> changes but the content of <hl>@names</hl> remains the same
as it was after the call to <hl>splice</hl>.

<include file="examples/insert_array_in_array_change.pl">

<code>
$ perl examples/insert_array_in_array_change.pl 

$VAR1 = [
          'Foo',
          'Perl',
          'Python',
          'Ruby',
          'PHP',
          'Bar',
          'Baz'
        ];

$VAR1 = [
          'Perl',
          'Python',
          'JavaScript',
          'PHP'
        ];
$VAR1 = [
          'Foo',
          'Perl',
          'Python',
          'Ruby',
          'PHP',
          'Bar',
          'Baz'
        ];
</code>

<h2>Changing the content of the references array</h2>

On the other hand, if we take the case when we inserted a an array reference in the
array and created a two dimensional array, then the internal array remains "connected"
to the original array. Thus if we change the <hl>@languages</hl> array (setting element 2
to be JavaScript) this change will be reflected both in <hl>@languages</hl> and in
the internal array of <hl>@names</hl>. (See JavaScript in the 2 last dumps below)

<include file="examples/insert_array_ref_in_array_change.pl">

<code>
perl examples/insert_array_ref_in_array_change.pl 

$VAR1 = [
          'Foo',
          [
            'Perl',
            'Python',
            'Ruby',
            'PHP'
          ],
          'Bar',
          'Baz'
        ];
Ruby
$VAR1 = [
          'Perl',
          'Python',
          'Ruby',
          'PHP'
        ];

$VAR1 = [
          'Perl',
          'Python',
          'JavaScript',
          'PHP'
        ];
$VAR1 = [
          'Foo',
          [
            'Perl',
            'Python',
            'JavaScript',
            'PHP'
          ],
          'Bar',
          'Baz'
        ];
</code>

This happens because in the second case we have copied the reference of the array but now both <hl>@languages</hl> and
<hl>$names[1]</hl> point to the same location in the memory. So if we change the content of either of those, the
other one will change too.

