=title Perl de Hashler
=timestamp 2015-03-30T23:12:06
=indexes hash, keys, value, associative, %, =>, fat arrow, fat comma
=status show
=original perl-hashes
=books beginner
=author szabgab
=translator kbeyazli
=comments_disqus_enable 1

=abstract start

<a href="/perl-tutorial">Perl Eğitimleri</a> nin bu bölümünde 
<b>hashleri</b>, Perl dilinin en güçlü özelliklerinden birini öğreneceğiz.

İlişkili dizi, sözlük veya harita olarak adlandırılan hash ler Perl dilinde mevcut veri yapılarından biridir.

=abstract end

Hash sırasız anahtar-değer (key-value) 2'li gruplarından oluşur. Anahtarlar tekil sözcüktür (string). Değerler ise skalardır.
Her değer bir rakam, sözcük veya referans olabilir.

Hashler, diğer Perl değişkenleri gibi <hl>my</hl> anahtar sözcüğü ile tanımlanır. Değişken adının önünde yüzde
(<hl>%</hl>) işareti bulunur. 

Bu tanımlama anahtar-değer yapısını hatırlatmada yardımcı olur.

Bazı insanlar hashlerin dizi gibi olduğunu düşünür (eski adı ile 'ilişkisel dizi' bunu ifade eder, ve diğer bazı dillerde,
mesela PHP dilinde, dizi ve hash arasında bir fark yoktur.), fakat dizi ve hash arasında iki büyük fark vardır. 
Diziler sıralıdır ve dizi elemanına rakamsal indeks kullanılarak erişilir.
Hashler sırasızdır ve değere string bir anahtar ile erişilir.

Her hash anahtarı (key) bir <b>değer (value)</b> ile ilişkilendirilir ve anahtarlar (key) hash yapısında tekildir.
Bunun anlamı tekrar eden anahtar (key) a izin verilmediğidir. (Eğer gerçekten bir anahtar için birden fazla değer olması
isteniyorsa, referanslar konusuna geçene kadar bir müddet beklemeniz gerekecek).

Kod üzerinde görelim:

<h2>Boş bir hash oluşturma</h2>

<code lang="perl">
my %color_of;
</code>

<h2>Anahtar-değer ikilisini hash e ekleme</h2>

Bu örnekte 'apple' anahtar, 'kırmızı' ise ilişkilendirilen değerdir.

<code lang="perl">
$color_of{'apple'} = 'red';
</code>

Ayrıca anahtar değeri olarak değişken kullanılabilir, bu durumda tırnak kullanımına
gerek yoktur:

<code lang="perl">
my $fruit = 'apple';
$color_of{$fruit} = 'red';
</code>

Aslında anahtar basit bir sözcük ise, direkt sözcük kullanılsa bile turnak kaldırılabilir:

<code lang="perl">
$color_of{apple} = 'red';
</code>

Yukarıda görüleceği üzere, anahtar-değer ikilisine erişirken, <hl>$</hl> işareti kullanılır (% işareti değil)
çünkü <b>skalar</b> bir değere erişiyoruz. Anahtar süslü parantez içerisinde yer alır.

<h2>Bir hash elemanına erişim</h2>

Eleman eklemeye benzer şekilde, bir elemanın değerine erişebiliriz.

<code lang="perl">
print $color_of{apple};
</code>

Eğer anahtar hashde bulunmuyorsa, hash <a href="/undef-and-defined-in-perl">tanımsız (undef)</a> sonuç
döndürür ve eğer kodda <hl>uyarılar (warnings)</hl> aktif edilmişse, 
<a href="/use-of-uninitialized-value">ön tanımlama yapılmamış değer uyarısı</a> alırız.

<code lang="perl">
print $color_of{orange};
</code>

Şimdi daha fazla anahtar-değer içeren hash görelim:

<code lang="perl">
$color_of{orange} = "orange";
$color_of{grape} = "purple";
</code>

<h2>Değerleri ile birlikte hash tanımlama</h2>

Hash tanımı yaparken eş zamanlı olarak anahtar-değer çiftlerini atayabiliriz:

<code lang="perl">
my %color_of = (
    "apple"  => "red",
    "orange" => "orange",
    "grape"  => "purple",
);
</code>

<hl>=></hl> işareti <b>şişman ok (fat arrow)</b> veya <b>şişman virgül (fat comma)</b> olarak adlandırılır ve eleman çiftlerini gösterir.
İlki, yani şişman ok, ince ok (->) tanımını görünce daha anlaşılır olacaktır.
Şişman virgül adı bu okların temelde virgül ile aynı olmasından kaynaklanır. Bu nedenle aşağıdaki gibi de yazabilirdik:

<code lang="perl">
my %color_of = (
    "apple",  "red",
    "orange", "orange",
    "grape",  "purple",
);
</code>

Aslında şişman ok, kodu daha temiz ve okunabilir yapmak için soldaki elemanın tırnaklarını kaldırmamıza 
izin verir.

<code lang="perl">
my %color_of = (
    apple  => "red",
    orange => "orange",
    grape  => "purple",
);
</code>

<h2>Hash elemanına atama yapma</h2>

Şimdi var olan bir anahtara başka bir değer atadığımızda ne olduguğunu görelim:

<code lang="perl">
$color_of{apple} = "green";
print $color_of{apple};     # green
</code>

Atama işlemi <b>apple</b> ile ilişkilendirilen değeri değiştirdi. Anahtarların tekil ve her bir anahtarın bir değere
sahip oldugunu hatırlayalım.

<h2>Hash üzerinde işlemler</h2>

Bir hashdeki değere erişmek için anahtarı bilmeye ihtiyacımız vardır.
Hashin anahtarları ön tanımlı değerler değil ise, <hl>keys</hl> fonksiyonunu kullanarak
anahtar listesini alabiliriz. Daha sonra bu anahtarlar üzerinde işlem yapabiliriz:

<code lang="perl">
my @fruits = keys %color_of;
for my $fruit (@fruits) {
    print "The color of '$fruit' is $color_of{$fruit}\n";
}
</code>

<hl>@fruits</hl> geçici değişkenini bile kullanmaya ihtiyacımız yok, direkt 
<hl>keys</hl> fonksiyonundan dönen değerler üzerinde işlem yapabiliriz:

<code lang="perl">
for my $fruit (keys %color_of) {
    print "The color of '$fruit' is $color_of{$fruit}\n";
}
</code>


<h2>Dizinin boyutu</h2>

Dizinin boyutundan bahsettiğimiz zaman, genellikle anahtar-değer çifti sayısını kastederiz.
Bu değeri <hl>keys</hl> fonksiyonunu skalar bağlamda kullanarak elde edebiliriz.

<code lang="perl">
print scalar keys %hash;
</code>

<h2>Teşekkür</h2>

Bu makalenin ilk sürümü <a href="http://www.leprevost.com.br/">Felipe da Veiga Leprevost</a> tarafından yazılmıştır. Kendisi aynı zamanda
Perl Maven makalelerinin <a href="https://br.perlmaven.com/">Portekizce tercüme</a> sini yapmaktadır.




